#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const ejs = require('ejs');
const upperCamelCase = require('uppercamelcase');

const commander = require('commander');

// Templates

const templatesPath = path.join(__dirname, '..', 'scaffold');
const sourcePath = path.join(__dirname, '..', 'src');

function readTemplate(name) {
  const fileName = path.join(templatesPath, `${ name }.ejs`);

  return new Promise((resolve, reject) => {
    fs.readFile(fileName, (err, data) => {
      if (err) {
        return reject(err);
      }

      return resolve(data.toString());
    });
  });
}

function renderTemplate(data, template) {
  const content = ejs.render(template, data);

  return Promise.resolve(content);
}

function saveTemplate(fileName, content) {
  return new Promise((resolve, reject) => {
    fs.writeFile(fileName, content, err => {
      if (err) {
        return reject(err);
      }

      return resolve(content);
    });
  });
}

function generateFile(name, data, outputPath) {
  return readTemplate(name)
    .then(renderTemplate.bind(null, data))
    .then(saveTemplate.bind(null, outputPath))
    .catch(err => console.log(err)); // eslint-disable-line
}

function extractName(scaffoldName) {
  const pathElements = scaffoldName.split('/');
  const name = pathElements[pathElements.length - 1];

  return upperCamelCase(name);
}

// Commands

commander.version(require('../package').version);

commander.usage('[generator] [name]');

commander
  .command('component [name]')
  .alias('c')
  .description('generate class component')
  .action(component => {
    const outputPath = path.join(sourcePath, 'components', `${component}.js`);
    const name = extractName(component);

    return generateFile('component', { name }, outputPath);
  });

commander
  .command('pure-component [name]')
  .alias('p')
  .description('generate pure component')
  .action(component => {
    const outputPath = path.join(sourcePath, 'components', `${component}.js`);
    const name = extractName(component);

    return generateFile('pure-component', { name }, outputPath);
  });

commander.parse(process.argv);
